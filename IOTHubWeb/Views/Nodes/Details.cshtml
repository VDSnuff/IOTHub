@model IOTHub.ViewModels.NodeDetailsViewModels

@{
    ViewBag.Title = "Node Details";
}
<div style="color:white; padding-left:5%" class="container">
    <h2>Details</h2>

    <div>
        <h4>Node</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Name)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Name)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Description)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Description)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Country)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Country)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.City)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.City)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Street)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Street)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Area)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Area)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Latitude)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Latitude)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NodeDedails.Longitude)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NodeDedails.Longitude)
            </dd>

        </dl>

        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Type)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Model)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Place)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Latitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Dots.FirstOrDefault().Longitude)
                </th>
                <th></th>
            </tr>


            @foreach (var item in Model.Dots)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DotType.Type)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Model)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Place)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Latitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Longitude)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", "Dots", new { id = item.Id }, new { @class = "btn btn-primary" })
                        @Html.ActionLink("Details", "Details", "Dots", new { id = item.Id }, new { @class = "btn btn-info" })
                        @Html.ActionLink("Delete", "Delete", "Dots", new { id = item.Id }, new { @class = "btn btn-danger" })
                    </td>
                </tr>
            }

        </table>

    </div>
    <p>
        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
        @Html.ActionLink("Create new dot", "Create", "Dots", new { nodeId = Model.NodeDedails.Id }, new { @class = "btn btn-success" })
    </p>
</div>
@*<style>
    #map {
        height: 56vh;
        width: auto;
    }
</style>

<div id="map"></div>
<script>
    var latLng = { lat: @Model.NodeDedails.Latitude, lng: @Model.NodeDedails.Longitude };
    var map;
    var marker;
    var dotListJS;
    @{var dotListRaw = Model.Dots;}
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center:latLng,
            zoom: 18
        });

        dotListJS = @Html.Raw(Json.Encode(dotListRaw));
        dotListJS.forEach(function (element) {
            marker = new google.maps.Marker({
                position: { lat: element.Latitude, lng: element.Longitude },
                map: map,
                title: element.Name,
                icon: 'https://github.com/VDSnuff/IOTHub/blob/master/IOTHubWeb/App_Data/triangle_64.png?raw=true',
                label: { color: '#ED1C24', fontWeight: 'bold', fontSize: '14px', text: element.Name },
            });
        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEi9L_6xG0THDSXMx0rZZnIqlL0cvtkZg&callback=initMap" async defer></script>*@











<style>
    #map {
        height: 90vh;
        width: auto;
        margin-left: 200px;
    }

    .map-control {
        background-color: #fff;
        border: 1px solid #ccc;
        box-shadow: 0 2px 2px rgba(33, 33, 33, 0.4);
        font-family: 'Roboto','sans-serif';
        margin: 10px;
        padding-right: 5px;
        /* Hide the control initially, to prevent it from appearing
           before the map loads. */
        display: none;
    }
    /* Display the control once it is inside the map. */
    #map .map-control {
        display: block;
    }

    .selector-control {
        font-size: 14px;
        line-height: 30px;
        vertical-align: baseline;
    }
    }
</style>
<div id="style-selector-control" class="map-control">
    <input type="radio" name="show-hide" id="hide-poi"
           class="selector-control">
    <label for="hide-poi">Hide</label>
    <input type="radio" name="show-hide" id="show-poi"
           class="selector-control" checked="checked">
    <label for="show-poi">Show</label>
</div>
<div id="map"></div>

<script>
    var latLng = { lat: @Model.NodeDedails.Latitude, lng: @Model.NodeDedails.Longitude };
    var marker;
    var nodeListJS;

    function initMap() {

        // Create a new StyledMapType object, passing it an array of styles,
        // and the name to be displayed on the map type control.
        var styledMapType = new google.maps.StyledMapType(
            [
                {
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#212121"
                        }
                    ]
                },
                {
                    "elementType": "labels.icon",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#757575"
                        }
                    ]
                },
                {
                    "elementType": "labels.text.stroke",
                    "stylers": [
                        {
                            "color": "#212121"
                        }
                    ]
                },
                {
                    "featureType": "administrative",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#757575"
                        }
                    ]
                },
                {
                    "featureType": "administrative.country",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#9e9e9e"
                        }
                    ]
                },
                {
                    "featureType": "administrative.locality",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#bdbdbd"
                        }
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#757575"
                        }
                    ]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#181818"
                        }
                    ]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#616161"
                        }
                    ]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "labels.text.stroke",
                    "stylers": [
                        {
                            "color": "#1b1b1b"
                        }
                    ]
                },
                {
                    "featureType": "road",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {
                            "color": "#2c2c2c"
                        }
                    ]
                },
                {
                    "featureType": "road",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#8a8a8a"
                        }
                    ]
                },
                {
                    "featureType": "road.arterial",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#373737"
                        }
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#3c3c3c"
                        }
                    ]
                },
                {
                    "featureType": "road.highway.controlled_access",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#4e4e4e"
                        }
                    ]
                },
                {
                    "featureType": "road.local",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#616161"
                        }
                    ]
                },
                {
                    "featureType": "transit",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#757575"
                        }
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#000000"
                        }
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#3d3d3d"
                        }
                    ]
                }
            ],
            { name: 'Styled Map' });

        // Create a map object, and include the MapTypeId to add
        // to the map type control.
        var map = new google.maps.Map(document.getElementById('map'), {
            center: latLng,
            zoom: 17,
            mapTypeControl: false,
            mapTypeControlOptions: {
                mapTypeIds: ['roadmap', 'satellite', 'hybrid', 'terrain',
                    'styled_map']
            }
        });

        // Add controls to the map, allowing users to hide/show features.
        //var styleControl = document.getElementById('style-selector-control');
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(styleControl);

        // Apply new JSON when the user chooses to hide/show features.
        //document.getElementById('hide-poi').addEventListener('click', function () {
        //    map.setOptions({ styles: styles['hide'] });
        //});
        //document.getElementById('show-poi').addEventListener('click', function () {
        //    map.setOptions({ styles: styles['default'] });
        //});



        //Associate the styled map with the MapTypeId and set it to display.
        map.mapTypes.set('styled_map', styledMapType);
        map.setMapTypeId('styled_map');

          dotListJS = @Html.Raw(Json.Encode(Model.Dots));
            dotListJS.forEach(function (element) {
                marker = new google.maps.Marker({
                    position: { lat: element.Latitude, lng: element.Longitude },
                    map: map,
                    title: element.Name,
                    icon: 'https://github.com/VDSnuff/IOTHub/blob/master/IOTHubWeb/Img/nodes_red.png?raw=true',
                    label: { color: '#FFFFFF', fontWeight: 'bold', fontSize: '14px', text: element.Name },
                });
            });

    }

    var styles = {
        default: null,
        hide: [
            {
                featureType: 'poi.business',
                stylers: [{ visibility: 'off' }]
            },
            {
                featureType: 'transit',
                elementType: 'labels.icon',
                stylers: [{ visibility: 'off' }]
            }
        ]
    };
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEi9L_6xG0THDSXMx0rZZnIqlL0cvtkZg&callback=initMap" async defer></script>